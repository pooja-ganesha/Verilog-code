// Code your design here
module syn_fifo #(parameter DEPTH = 8, WIDTH =3 )(input clk, input rstn, input wr_en, input rd_en, input [7:0] data_in, output reg empty, output reg full,output reg [7:0] data_out, output reg [WIDTH:0] count );
  
  reg [7:0] fifo[0:DEPTH-1];
  reg [WIDTH-1:0] wr_ptr, rd_ptr;
  
  always @(count) begin
    full = count == DEPTH ?1:0;
    empty = count == 0 ?1:0;
  end
  
  always @(posedge clk)begin
    if(!rstn)
      count <= 0;
    
    else if ((!full && wr_en) && (!empty && rd_en))		//both read and write
      count <= count;
    else if (!full && wr_en)		//write only
      count <= count +1;
    else if (!empty && rd_en)       //read only
      count <= count -1;
    else count <= count;
    
  end
    
      
  always @(posedge clk) begin
    if(!rstn)
      data_out <=0;
    else if (!empty && rd_en)
      data_out <= fifo[rd_ptr];
    else 
      data_out <= data_out;
  end
  
  always @(posedge clk) begin
    if (!full && wr_en)
      fifo[wr_ptr] <= data_in;
    else 
      fifo[wr_ptr] <= fifo[wr_ptr];
  end
  
  always@(posedge clk) begin
    if(!rstn) begin
      rd_ptr <= 0;
      wr_ptr <= 0;
      empty <= 1;
    end
    
    else begin 
      if (!empty && rd_en)
        rd_ptr <= (rd_ptr + 1)%DEPTH;  //incremented pointer is % with DEPTH so that next pointer wraps around to 0
      else
        rd_ptr <= rd_ptr;
      
      if (!full && wr_en)
        wr_ptr <= (wr_ptr + 1)%DEPTH;  //incremented pointer is % with DEPTH so that next pointer wraps around to 0
      else 
        wr_ptr <= wr_ptr;
      
    end
  end
  
endmodule
    
